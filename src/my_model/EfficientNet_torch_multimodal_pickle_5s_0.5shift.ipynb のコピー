{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"EfficientNet_torch_multimodal_pickle_5s_0.5shift.ipynb のコピー","provenance":[{"file_id":"1UO0fssEK5-677ly1S6gH1b_HZqExVQFQ","timestamp":1656395497641}],"collapsed_sections":[],"mount_file_id":"1pNULpE0-1oclTgjGOjyGTgBgYq0b8gaf","authorship_tag":"ABX9TyNnADvxBD68f6XUmDMXfN5G"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"lLQXquGXij0e","executionInfo":{"status":"ok","timestamp":1657009879807,"user_tz":-540,"elapsed":3256,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"outputs":[],"source":["import math\n","import torch\n","from torch import nn"]},{"cell_type":"markdown","source":["# Model"],"metadata":{"id":"EfN5_6E_X23r"}},{"cell_type":"code","source":["class Swish(nn.Module):\n","  def forward(self, x):\n","    return x * torch.sigmoid(x)"],"metadata":{"id":"fSF3Ltyaiop1","executionInfo":{"status":"ok","timestamp":1657009879808,"user_tz":-540,"elapsed":32,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["class FeatureEx1d(nn.Module):\n","  def __init__(self, input_size):\n","    super().__init__()\n","    self.layers = nn.Sequential(\n","        nn.linear(input_size, 256),\n","        nn.functional.relu(),\n","        nn.linear(256, 128),\n","        nn.functional.relu(),\n","        nn.linear(128, 64),\n","        nn.functional.relu()\n","    )\n","\n","  def forward(self, x):\n","    return self.layers(x)"],"metadata":{"id":"NQxzSm2sC5UQ","executionInfo":{"status":"ok","timestamp":1657009879809,"user_tz":-540,"elapsed":29,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["class SEblock(nn.Module):\n","  def __init__(self, ch_in, ch_sq):\n","    super().__init__()\n","    self.se = nn.Sequential(\n","        nn.AdaptiveAvgPool2d(1),\n","        nn.Conv2d(ch_in, ch_sq, 1),\n","        Swish(),\n","        nn.Conv2d(ch_sq, ch_in, 1),\n","    )\n","    self.se.apply(weight_init)\n","\n","  def forward(self, x):\n","    return x * torch.sigmoid(self.se(x))\n","\n","def weight_init(m):\n","  if isinstance(m, nn.Conv2d):\n","    nn.init.kaiming_normal_(m.weight)\n","\n","  if isinstance(m, nn.Linear):\n","    nn.init.kaiming_uniform_(m.weight)\n","    nn.init.zeros_(m.bias)"],"metadata":{"id":"RDn01xTuk5ks","executionInfo":{"status":"ok","timestamp":1657009879810,"user_tz":-540,"elapsed":28,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["class ConvBN(nn.Module):\n","  def __init__(self, ch_in, ch_out, kernel_size, stride=1, padding=0, groups=1):\n","    super().__init__()\n","    self.layers=nn.Sequential(\n","        nn.Conv2d(ch_in, ch_out, kernel_size, stride, padding, groups=groups, bias=False),\n","        nn.BatchNorm2d(ch_out),\n","    )\n","    self.layers.apply(weight_init)\n","\n","  def forward(self, x):\n","    return self.layers(x)"],"metadata":{"id":"iJuPyMQRWa_e","executionInfo":{"status":"ok","timestamp":1657009879811,"user_tz":-540,"elapsed":28,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["class DropConnect(nn.Module):\n","  def __init__(self, drop_rate):\n","    super().__init__()\n","    self.drop_rate=drop_rate\n","\n","  def forward(self, x):\n","    if self.training:\n","      keep_rate=1.0-self.drop_rate\n","      r = torch.rand([x.size(0),1,1,1], dtype=x.dtype).to(x.device)\n","      r+=keep_rate\n","      mask=r.floor()\n","      return x.div(keep_rate)*mask\n","    else:\n","      return x"],"metadata":{"id":"lOPSk6LSYaeu","executionInfo":{"status":"ok","timestamp":1657009879811,"user_tz":-540,"elapsed":26,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["class BMConvBlock(nn.Module):\n","  def __init__(self,ch_in,ch_out,expand_ratio,stride,kernel_size,reduction_ratio=4,drop_connect_rate=0.2):\n","    super().__init__()\n","    self.use_residual = (ch_in==ch_out) & (stride==1)\n","    ch_med = int(ch_in*expand_ratio)\n","    ch_sq  = max(1, ch_in//reduction_ratio)\n","\n","    if expand_ratio != 1.0:\n","      layers = [ConvBN(ch_in, ch_med, 1), Swish()]\n","    else:\n","      layers = []\n","    \n","    layers.extend([ConvBN(ch_med, ch_med, kernel_size, stride=stride, padding=(kernel_size)//2, groups=ch_med),\n","                  Swish(),\n","                  SEblock(ch_med, ch_sq),\n","                  ConvBN(ch_med, ch_out, 1),\n","                  ])\n","    \n","    if self.use_residual:\n","      self.drop_connect = DropConnect(drop_connect_rate)\n","\n","    self.layers = nn.Sequential(*layers)\n","\n","  def forward(self, x):\n","    if self.use_residual:\n","      return x + self.drop_connect(self.layers(x))\n","    else:\n","      return self.layers(x)"],"metadata":{"id":"C3vIC7-3faz3","executionInfo":{"status":"ok","timestamp":1657009879812,"user_tz":-540,"elapsed":25,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["class Flatten(nn.Module):\n","  def forward(self, x):\n","    return x.view(x.shape[0], -1)"],"metadata":{"id":"09aLW1oy5AeV","executionInfo":{"status":"ok","timestamp":1657009879813,"user_tz":-540,"elapsed":25,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["class MultiModalNet(nn.Module):\n","  def __init__(self,\n","               width_mult=1.0,\n","               depth_mult=1.0,\n","               resolution=None,\n","               dropout_rate=0.2,\n","               num_1d_features=10,\n","               num_classes=4,\n","               input_ch=3):\n","    super().__init__()\n","\n","    # expand_ratio, channel, repeats, stride, kernel_size                   \n","    settings = [\n","        [1,  16, 1, 1, 3],  # MBConv1_3x3, SE, 112 -> 112                   \n","        [6,  24, 2, 2, 3],  # MBConv6_3x3, SE, 112 ->  56                   \n","        [6,  40, 2, 2, 5],  # MBConv6_5x5, SE,  56 ->  28                   \n","        [6,  80, 3, 2, 3],  # MBConv6_3x3, SE,  28 ->  14                   \n","        [6, 112, 3, 1, 5],  # MBConv6_5x5, SE,  14 ->  14                   \n","        [6, 192, 4, 2, 5],  # MBConv6_5x5, SE,  14 ->   7                   \n","        [6, 320, 1, 1, 3]   # MBConv6_3x3, SE,   7 ->   7]                  \n","    ]\n","    ch_out = int(math.ceil(32*width_mult))\n","    features = [nn.AdaptiveAvgPool2d(resolution)] if resolution else []\n","    features.extend([ConvBN(input_ch, ch_out, 3, stride=2), Swish()])     # -> [32, 3, 3, 3]\n","\n","    ch_in = ch_out\n","    for t, c, n, s, k in settings:\n","      ch_out = int(math.ceil(c*width_mult))\n","      repeats = int(math.ceil(n*depth_mult))\n","      for i in range(repeats):\n","        stride = s if i==0 else 1\n","        features.extend([BMConvBlock(ch_in, ch_out, t, stride, k)])\n","        ch_in = ch_out\n","\n","    ch_last = int(math.ceil(1280*width_mult))\n","    features.extend([ConvBN(ch_in, ch_last, 1), Swish()])\n","\n","    self.features2d = nn.Sequential(*features)\n","    self.reshape = nn.Sequential(\n","        nn.AdaptiveAvgPool2d(1),\n","        Flatten(),\n","        nn.Dropout(dropout_rate),\n","        nn.Linear(ch_last, 128)\n","    )\n","    self.classifier = nn.Sequential(\n","        nn.Linear(128*2, 128),\n","        nn.ReLU(),\n","        nn.Linear(128, 64),\n","        nn.ReLU(),\n","        nn.Linear(64, num_classes),\n","        nn.Softmax()\n","    )\n","\n","    self.features1d = nn.Sequential(\n","        nn.Linear(num_1d_features, 256),\n","        nn.ReLU(),\n","        nn.Linear(256, 128),\n","        nn.ReLU(),\n","    )\n","\n","  def forward(self, x):\n","    x1=self.features2d(x[1])\n","    x1=self.reshape(x1)\n","    x0=self.features1d(x[0])\n","    x = torch.cat((x0,x1), dim=1)\n","    x=self.classifier(x)\n","\n","    return x"],"metadata":{"id":"QeGdaxlz5U6_","executionInfo":{"status":"ok","timestamp":1657009879813,"user_tz":-540,"elapsed":23,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["# Dataset"],"metadata":{"id":"oeU7XniFXyTe"}},{"cell_type":"code","source":["RESEARCH_WORK_PATH = \"/content/drive/MyDrive/Colab Notebooks/BachelorResearch/\""],"metadata":{"id":"66a6YkLhHnbs","executionInfo":{"status":"ok","timestamp":1657009879814,"user_tz":-540,"elapsed":22,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","execution_count":11,"metadata":{"id":"GBSyWXyPcUcq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657011144601,"user_tz":-540,"elapsed":1264807,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}},"outputId":"5f2901cc-1e92-4f2e-a14d-534192f21bad"},"outputs":[{"output_type":"stream","name":"stdout","text":["Q1 9200\n","Q2 9200\n","Q3 9200\n","Q4 9200\n","Q1 9200\n","Q2 9200\n","Q3 9200\n","Q4 9200\n"]}],"source":["import shutil\n","import os\n","\n","\n","data_dir = \"/content/datas/\"\n","if os.path.exists(data_dir):\n","  shutil.rmtree(data_dir)\n","for dirs in os.listdir(RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\"):\n","  if \"Q\" in dirs:\n","    shutil.copytree(RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\" + dirs, data_dir + dirs)\n","\n","for q in \"Q1 Q2 Q3 Q4\".split(\" \"):\n","  d = RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\"  + q + \"/\"\n","  print(q, sum(os.path.isfile(os.path.join(d, name)) for name in os.listdir(d)))\n","\n","for q in \"Q1 Q2 Q3 Q4\".split(\" \"):\n","  d = data_dir + q + \"/\"\n","  print(q, sum(os.path.isfile(os.path.join(d, name)) for name in os.listdir(d)))"]},{"cell_type":"code","source":["import os\n","def make_filepath_list(root, train_rate=0.8):\n","  train_file_list = []\n","  valid_file_list = []\n","\n","  for dirs in os.listdir(root):\n","    if \"Q\" in dirs:\n","      file_dir = os.path.join(root, dirs)\n","      file_list = os.listdir(file_dir)\n","\n","\n","      for f in file_list:\n","        split_num = int(f.split(\".\")[1].split(\"_\")[-1])\n","        if split_num % 5 == 4:\n","          valid_file_list.append(os.path.join(root, dirs, f).replace('\\\\', '/'))\n","        else:\n","          train_file_list.append(os.path.join(root, dirs, f).replace('\\\\', '/'))\n","\n","  \n","  return train_file_list, valid_file_list\n"],"metadata":{"id":"Qisijwexdj-c","executionInfo":{"status":"ok","timestamp":1657011144602,"user_tz":-540,"elapsed":7,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["from torch.utils import data\n","import numpy as np\n","import librosa\n","import pickle\n","import torch\n","import cv2\n","\n","class musicDataset(data.Dataset):\n","\n","  def __init__(self, file_list, classes, phase='train'):\n","    self.file_list = file_list\n","    self.classes = classes\n","    self.phase = phase\n","\n","  def __len__(self):\n","    return len(self.file_list)\n","\n","\n","  def __getitem__(self, index):\n","    pickle_path = self.file_list[index]\n","    x,y = pickle.load(open(pickle_path, mode=\"rb\"))\n","    return x, y\n","\n","\n","train_file_list, valid_file_list = make_filepath_list(data_dir)\n","\n","print('学習データ数 : ', len(train_file_list))\n","print(train_file_list[0])\n","\n","print('検証データ数 : ', len(valid_file_list))\n","print(valid_file_list[0])\n","\n","q_classes = \"Q1 Q2 Q3 Q4\".split(\" \")\n","\n","train_dataset = musicDataset(\n","    file_list=train_file_list, classes=q_classes, phase='train'\n",")\n","\n","valid_dataset = musicDataset(\n","    file_list=valid_file_list, classes=q_classes, phase='valid'\n",")\n","\n","\n","index = 0\n","print(\"Dataset1 shape:\", train_dataset.__getitem__(index)[0][0].size())\n","print(\"Dataset2 shape:\", train_dataset.__getitem__(index)[0][1].size())\n","print(\"Dataset label:\", train_dataset.__getitem__(index)[1])"],"metadata":{"id":"YZBZDOaQYDkf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657011147878,"user_tz":-540,"elapsed":3280,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}},"outputId":"78599ab9-cbaa-4d11-f978-477645e0068a"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["学習データ数 :  29600\n","/content/datas/Q3/Q3.MT0003114552_20.wav.pickle\n","検証データ数 :  7200\n","/content/datas/Q3/Q3.MT0009169626_19.wav.pickle\n","Dataset1 shape: torch.Size([26])\n","Dataset2 shape: torch.Size([1, 431, 257])\n","Dataset label: 2\n"]}]},{"cell_type":"markdown","source":["# DataLoader"],"metadata":{"id":"7trqW82_xGAa"}},{"cell_type":"code","source":["# バッチサイズの指定\n","batch_size = 32\n","\n","# DataLoaderを作成\n","train_dataloader = data.DataLoader(\n","    train_dataset, batch_size=batch_size, shuffle=True, num_workers=os.cpu_count(), pin_memory=True)\n","\n","valid_dataloader = data.DataLoader(\n","    valid_dataset, batch_size=batch_size, shuffle=False, num_workers=os.cpu_count(), pin_memory=True)\n","\n","# pin_mem and num_workers are acceleration technique -> https://qiita.com/sugulu_Ogawa_ISID/items/62f5f7adee083d96a587#11-num_workers\n","\n","# 辞書にまとめる\n","dataloaders_dict = {\n","    'train': train_dataloader, \n","    'valid': valid_dataloader\n","}\n","\n","# 動作確認\n","# イテレータに変換\n","batch_iterator = iter(dataloaders_dict['train'])\n","\n","# 1番目の要素を取り出す\n","inputs, labels = next(batch_iterator)\n","\n","print(inputs[0].size())\n","print(inputs[1].size())\n","print(labels)\n"],"metadata":{"id":"B6vsgsJWxIsd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1657011159960,"user_tz":-540,"elapsed":11740,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}},"outputId":"8e06dd1f-4ef2-43ca-c8a9-4d1cc6b1c64d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([32, 26])\n","torch.Size([32, 1, 431, 257])\n","tensor([3, 2, 1, 1, 0, 3, 2, 2, 2, 2, 3, 2, 0, 3, 0, 2, 3, 2, 1, 1, 1, 0, 3, 1,\n","        2, 0, 2, 3, 2, 2, 2, 1])\n"]}]},{"cell_type":"markdown","source":["# Optimizer, Criterion"],"metadata":{"id":"6sQ_HYBMX8zK"}},{"cell_type":"code","source":["torch_clearlizer = False #@param {type: \"boolean\"}\n","\n","if torch_clearlizer:\n","  del train_dataset\n","  del valid_dataset\n","  del train_dataloader\n","  del valid_dataloader\n","  del labels\n","  del loss_hist\n","  del acc_hist\n","  del optimizer\n","  del criterion\n","  torch.cuda.empty_cache()"],"metadata":{"id":"uZ4VYiy4RLQc","executionInfo":{"status":"ok","timestamp":1657011159961,"user_tz":-540,"elapsed":37,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["from torch import optim\n","\n","model     = MultiModalNet(input_ch=1, num_classes=4, num_1d_features=train_dataset.__getitem__(index)[0][0].size(0)).to('cuda')\n","optimizer = optim.SGD(model.parameters(),lr=0.1) \n","criterion = nn.CrossEntropyLoss()"],"metadata":{"id":"fvrLY1X_x7vx","executionInfo":{"status":"ok","timestamp":1657011159962,"user_tz":-540,"elapsed":35,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":["SGD -> じわっとloss減ってく\n"],"metadata":{"id":"4W8ghOHYn7It"}},{"cell_type":"markdown","source":["# Training"],"metadata":{"id":"RlJy_DzbyMMd"}},{"cell_type":"code","source":["from tqdm import tqdm\n","# エポック数\n","num_epochs = 40\n","\n","\n","loss_hist = [[],[]]\n","acc_hist = [[],[]]\n","\n","for epoch in range(num_epochs):\n","  print('Epoch {}/{}'.format(epoch+1, num_epochs))\n","  print('-------------')\n","  \n","  for phase in ['train', 'valid']:\n","      \n","    if phase == 'train':\n","      # モデルを訓練モードに設定\n","      model.train()\n","    else:\n","      # モデルを推論モードに設定\n","      model.eval()\n","    \n","    # 損失和\n","    epoch_loss = 0.0\n","    # 正解数\n","    epoch_corrects = 0\n","    \n","    # DataLoaderからデータをバッチごとに取り出す\n","    with tqdm(dataloaders_dict[phase],unit='batch',colour='green' if phase == 'train' else 'red') as pbar:\n","      pbar.set_description('['+phase+'] Epoch %d'% (epoch+1))\n","      for inputs, labels in pbar:\n","        inputs = [inputs[0].to('cuda') , inputs[1].to('cuda')]\n","        labels = labels.to('cuda')\n","        # optimizerの初期化\n","        optimizer.zero_grad()\n","        \n","        # 学習時のみ勾配を計算させる設定にする\n","        with torch.set_grad_enabled(phase == 'train'):\n","          outputs = model(inputs)\n","          \n","          # 損失を計算\n","          loss = criterion(outputs, labels)\n","          \n","          # ラベルを予測\n","          _, preds = torch.max(outputs, 1)\n","          \n","          # 訓練時はバックプロパゲーション\n","          if phase == 'train':\n","            # 逆伝搬の計算\n","            loss.backward()\n","            # パラメータの更新\n","            optimizer.step()\n","          \n","          # イテレーション結果の計算\n","          # lossの合計を更新\n","          # PyTorchの仕様上各バッチ内での平均のlossが計算される。\n","          # データ数を掛けることで平均から合計に変換をしている。\n","          # 損失和は「全データの損失/データ数」で計算されるため、\n","          # 平均のままだと損失和を求めることができないため。\n","          l = loss.item()\n","          epoch_loss += l * inputs[0].size(0)\n","          pbar.set_postfix(dict(loss=l))\n","\n","          # 正解数の合計を更新\n","          epoch_corrects += torch.sum(preds == labels.data)\n","\n","    # epochごとのlossと正解率を表示\n","    epoch_loss = epoch_loss / len(dataloaders_dict[phase].dataset)\n","    epoch_acc = epoch_corrects.double() / len(dataloaders_dict[phase].dataset)\n","    loss_hist[0].append(epoch_loss) if phase == 'train' else loss_hist[1].append(epoch_loss)\n","    acc_hist[0].append(epoch_acc)      if phase == 'train' else acc_hist[1].append(epoch_acc)\n","\n","    print('[{}] Epoch {} Result: Loss: {:.4f} Acc: {:.4f}\\n'.format(phase, epoch+1, epoch_loss, epoch_acc))"],"metadata":{"id":"U6W9AAwsyL3-","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3402b84e-57fb-4ca5-de5b-294815357f75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 1:   0%|\u001b[32m          \u001b[0m| 0/925 [00:00<?, ?batch/s]/usr/local/lib/python3.7/dist-packages/torch/nn/modules/container.py:141: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.\n","  input = module(input)\n","[train] Epoch 1: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:06<00:00,  3.75batch/s, loss=1.14]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 1 Result: Loss: 1.2359 Acc: 0.4770\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 1: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.58batch/s, loss=1.01]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 1 Result: Loss: 1.1481 Acc: 0.5747\n","\n","Epoch 2/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 2: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=1.06]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 2 Result: Loss: 1.1158 Acc: 0.6191\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 2: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.69batch/s, loss=0.965]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 2 Result: Loss: 1.0787 Acc: 0.6608\n","\n","Epoch 3/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 3: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.992]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 3 Result: Loss: 1.0580 Acc: 0.6837\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 3: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.52batch/s, loss=0.929]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 3 Result: Loss: 1.0302 Acc: 0.7132\n","\n","Epoch 4/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 4: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.957]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 4 Result: Loss: 1.0175 Acc: 0.7242\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 4: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:30<00:00,  7.39batch/s, loss=0.939]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 4 Result: Loss: 0.9894 Acc: 0.7550\n","\n","Epoch 5/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 5: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=1.03]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 5 Result: Loss: 0.9861 Acc: 0.7564\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 5: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:30<00:00,  7.47batch/s, loss=0.938]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 5 Result: Loss: 0.9856 Acc: 0.7560\n","\n","Epoch 6/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 6: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=1.09]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 6 Result: Loss: 0.9604 Acc: 0.7824\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 6: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.75batch/s, loss=0.889]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 6 Result: Loss: 0.9826 Acc: 0.7589\n","\n","Epoch 7/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 7: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.962]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 7 Result: Loss: 0.9364 Acc: 0.8061\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 7: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.66batch/s, loss=0.868]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 7 Result: Loss: 0.9338 Acc: 0.8071\n","\n","Epoch 8/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 8: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.838]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 8 Result: Loss: 0.9206 Acc: 0.8226\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 8: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.68batch/s, loss=0.846]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 8 Result: Loss: 0.8945 Acc: 0.8499\n","\n","Epoch 9/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 9: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.873]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 9 Result: Loss: 0.9036 Acc: 0.8394\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 9: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.78batch/s, loss=0.866]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 9 Result: Loss: 0.8892 Acc: 0.8558\n","\n","Epoch 10/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 10: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.894]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 10 Result: Loss: 0.8863 Acc: 0.8568\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 10: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.51batch/s, loss=0.876]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 10 Result: Loss: 0.8703 Acc: 0.8728\n","\n","Epoch 11/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 11: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.842]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 11 Result: Loss: 0.8738 Acc: 0.8697\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 11: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.60batch/s, loss=0.867]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 11 Result: Loss: 0.8500 Acc: 0.8938\n","\n","Epoch 12/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 12: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.87]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 12 Result: Loss: 0.8610 Acc: 0.8827\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 12: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.57batch/s, loss=0.844]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 12 Result: Loss: 0.8550 Acc: 0.8885\n","\n","Epoch 13/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 13: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.781]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 13 Result: Loss: 0.8500 Acc: 0.8940\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 13: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.82batch/s, loss=0.84]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 13 Result: Loss: 0.8430 Acc: 0.8997\n","\n","Epoch 14/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 14: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.85]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 14 Result: Loss: 0.8427 Acc: 0.9013\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 14: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.76batch/s, loss=0.863]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 14 Result: Loss: 0.8433 Acc: 0.9004\n","\n","Epoch 15/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 15: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.829]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 15 Result: Loss: 0.8385 Acc: 0.9046\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 15: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.76batch/s, loss=0.887]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 15 Result: Loss: 0.8394 Acc: 0.9046\n","\n","Epoch 16/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 16: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.816]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 16 Result: Loss: 0.8340 Acc: 0.9092\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 16: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.63batch/s, loss=0.843]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 16 Result: Loss: 0.8214 Acc: 0.9228\n","\n","Epoch 17/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 17: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.91]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 17 Result: Loss: 0.8248 Acc: 0.9182\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 17: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.78batch/s, loss=0.864]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 17 Result: Loss: 0.8179 Acc: 0.9258\n","\n","Epoch 18/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 18: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.846]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 18 Result: Loss: 0.8191 Acc: 0.9247\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 18: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.87batch/s, loss=0.833]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 18 Result: Loss: 0.8094 Acc: 0.9353\n","\n","Epoch 19/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 19: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.782]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 19 Result: Loss: 0.8157 Acc: 0.9284\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 19: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.79batch/s, loss=0.837]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 19 Result: Loss: 0.8177 Acc: 0.9263\n","\n","Epoch 20/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 20: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.877]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 20 Result: Loss: 0.8123 Acc: 0.9313\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 20: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.78batch/s, loss=0.837]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 20 Result: Loss: 0.8035 Acc: 0.9400\n","\n","Epoch 21/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 21: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:06<00:00,  3.76batch/s, loss=0.744]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 21 Result: Loss: 0.8074 Acc: 0.9362\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 21: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.61batch/s, loss=0.839]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 21 Result: Loss: 0.8068 Acc: 0.9364\n","\n","Epoch 22/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 22: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.773]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 22 Result: Loss: 0.8011 Acc: 0.9425\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 22: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.90batch/s, loss=0.809]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 22 Result: Loss: 0.7964 Acc: 0.9476\n","\n","Epoch 23/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 23: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.808]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 23 Result: Loss: 0.8010 Acc: 0.9424\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 23: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.54batch/s, loss=0.81]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 23 Result: Loss: 0.7950 Acc: 0.9489\n","\n","Epoch 24/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 24: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.798]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 24 Result: Loss: 0.7971 Acc: 0.9463\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 24: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.89batch/s, loss=0.837]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 24 Result: Loss: 0.7918 Acc: 0.9515\n","\n","Epoch 25/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 25: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.855]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 25 Result: Loss: 0.7935 Acc: 0.9504\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 25: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.51batch/s, loss=0.835]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 25 Result: Loss: 0.7952 Acc: 0.9487\n","\n","Epoch 26/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 26: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.775]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 26 Result: Loss: 0.7948 Acc: 0.9485\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 26: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:30<00:00,  7.41batch/s, loss=0.927]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 26 Result: Loss: 0.8038 Acc: 0.9403\n","\n","Epoch 27/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 27: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.76batch/s, loss=0.751]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 27 Result: Loss: 0.7899 Acc: 0.9540\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 27: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:30<00:00,  7.37batch/s, loss=0.807]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 27 Result: Loss: 0.7869 Acc: 0.9574\n","\n","Epoch 28/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 28: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.745]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 28 Result: Loss: 0.7880 Acc: 0.9555\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 28: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.76batch/s, loss=0.807]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 28 Result: Loss: 0.7835 Acc: 0.9606\n","\n","Epoch 29/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 29: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.774]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 29 Result: Loss: 0.7863 Acc: 0.9571\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 29: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.78batch/s, loss=0.807]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 29 Result: Loss: 0.7797 Acc: 0.9643\n","\n","Epoch 30/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 30: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.744]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 30 Result: Loss: 0.7844 Acc: 0.9595\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 30: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.55batch/s, loss=0.811]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 30 Result: Loss: 0.7845 Acc: 0.9587\n","\n","Epoch 31/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 31: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.806]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 31 Result: Loss: 0.7863 Acc: 0.9573\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 31: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:29<00:00,  7.72batch/s, loss=0.807]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 31 Result: Loss: 0.7811 Acc: 0.9625\n","\n","Epoch 32/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 32: 100%|\u001b[32m██████████\u001b[0m| 925/925 [04:05<00:00,  3.77batch/s, loss=0.744]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 32 Result: Loss: 0.7831 Acc: 0.9607\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 32: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:28<00:00,  7.89batch/s, loss=0.812]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 32 Result: Loss: 0.7829 Acc: 0.9601\n","\n","Epoch 33/40\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 33:  58%|\u001b[32m█████▊    \u001b[0m| 538/925 [02:22<01:42,  3.78batch/s, loss=0.82]"]}]},{"cell_type":"markdown","source":["# Visualization"],"metadata":{"id":"ePnwi3FxzO_C"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"_9TOc3heEQFN"},"outputs":[],"source":["from matplotlib import pyplot as plt\n","# 学習状況のプロット関数の定義\n","# 分類精度の履歴をプロット\n","plt.plot([a.cpu() for a in acc_hist[0]])\n","plt.plot([a.cpu() for a in acc_hist[1]])\n","plt.title('model accuracy')\n","plt.xlabel('epoch')\n","plt.ylabel('accuracy')\n","plt.legend(['training', 'validation'], loc='lower right')\n","plt.show()\n","\n","# 損失関数の履歴をプロット\n","plt.plot(loss_hist[0])\n","plt.plot(loss_hist[1])\n","plt.title('model loss')\n","plt.xlabel('epoch')\n","plt.ylabel('loss')\n","plt.legend(['training', 'validation'], loc='upper right')\n","plt.show()\n"]},{"cell_type":"markdown","source":["# Save the model"],"metadata":{"id":"hHUrC0da-tYX"}},{"cell_type":"code","source":["model_path = RESEARCH_WORK_PATH + 'models/multimodal_5s_0.5shift_40epoch.pth'\n","torch.save(model.state_dict(), model_path)"],"metadata":{"id":"PxdiQhBmQbwo"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 疑問点\n","入力画素数はどこでわかる？"],"metadata":{"id":"kSZEPzczWaYQ"}}]}