{"cells":[{"cell_type":"markdown","metadata":{"id":"vJ7XAbWrMsJd"},"source":["# Initialize"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":2396,"status":"ok","timestamp":1663305780889,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"lLQXquGXij0e"},"outputs":[],"source":["#@title Import {display-mode: \"form\"}\n","import math\n","import torch\n","from torch import nn"]},{"cell_type":"markdown","metadata":{"id":"kTqoHWz5lWn9"},"source":["# Model"]},{"cell_type":"code","execution_count":2,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1663305780890,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"tWTToIGulWoG"},"outputs":[],"source":["#@title Swish {display-mode: \"form\"}\n","class Swish(nn.Module):\n","  def forward(self, x):\n","    return x * torch.sigmoid(x)"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1663305780890,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"ceoUnMXjlWoG"},"outputs":[],"source":["#@title FeatureEx1d {display-mode: \"form\"}\n","class FeatureEx1d(nn.Module):\n","  def __init__(self, input_size):\n","    super().__init__()\n","    self.layers = nn.Sequential(\n","        nn.linear(input_size, 256),\n","        nn.functional.relu(),\n","        nn.linear(256, 128),\n","        nn.functional.relu(),\n","        nn.linear(128, 64),\n","        nn.functional.relu()\n","    )\n","\n","  def forward(self, x):\n","    return self.layers(x)"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1663305780890,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"hj0eLDiZlWoH"},"outputs":[],"source":["#@title SEblock {display-mode: \"form\"}\n","class SEblock(nn.Module):\n","  def __init__(self, ch_in, ch_sq):\n","    super().__init__()\n","    self.se = nn.Sequential(\n","        nn.AdaptiveAvgPool2d(1),\n","        nn.Conv2d(ch_in, ch_sq, 1),\n","        Swish(),\n","        nn.Conv2d(ch_sq, ch_in, 1),\n","    )\n","    self.se.apply(weight_init)\n","\n","  def forward(self, x):\n","    return x * torch.sigmoid(self.se(x))\n","\n","def weight_init(m):\n","  if isinstance(m, nn.Conv2d):\n","    nn.init.kaiming_normal_(m.weight)\n","\n","  if isinstance(m, nn.Linear):\n","    nn.init.kaiming_uniform_(m.weight)\n","    nn.init.zeros_(m.bias)"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1663305780891,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"lV9PI-thlWoH"},"outputs":[],"source":["#@title ConvBNFirst {display-mode: \"form\"}\n","class ConvBNFirst(nn.Module):\n","  def __init__(self, ch_in, ch_out, kernel_size=(3, 257), stride=(1, 257), padding=0, groups=1):\n","    super().__init__()\n","    self.layers=nn.Sequential(\n","        nn.Conv2d(ch_in, ch_out, kernel_size, stride, padding, groups=groups, bias=False),\n","        nn.BatchNorm2d(ch_out),\n","    )\n","    self.layers.apply(weight_init)\n","\n","  def forward(self, x):\n","    return self.layers(x)"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":457,"status":"ok","timestamp":1663305781343,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"4gfDTwZJlWoH"},"outputs":[],"source":["#@title ConvBN {display-mode: \"form\"}\n","class ConvBN(nn.Module):\n","  def __init__(self, ch_in, ch_out, kernel_size, stride=1, padding=0, groups=1):\n","    super().__init__()\n","    self.layers=nn.Sequential(\n","        nn.Conv2d(ch_in, ch_out, kernel_size, stride, padding, groups=groups, bias=False),\n","        nn.BatchNorm2d(ch_out),\n","    )\n","    self.layers.apply(weight_init)\n","\n","  def forward(self, x):\n","    return self.layers(x)"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663305781343,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"TOlvJBh_lWoH"},"outputs":[],"source":["#@title DropConnect {display-mode: \"form\"}\n","class DropConnect(nn.Module):\n","  def __init__(self, drop_rate):\n","    super().__init__()\n","    self.drop_rate=drop_rate\n","\n","  def forward(self, x):\n","    if self.training:\n","      keep_rate=1.0-self.drop_rate\n","      r = torch.rand([x.size(0),1,1,1], dtype=x.dtype).to(x.device)\n","      r+=keep_rate\n","      mask=r.floor()\n","      return x.div(keep_rate)*mask\n","    else:\n","      return x"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663305781343,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"gQcx3p46lWoH"},"outputs":[],"source":["#@title BMConvBlock {display-mode: \"form\"}\n","class BMConvBlock(nn.Module):\n","  def __init__(self,ch_in,ch_out,expand_ratio,stride,kernel_size,reduction_ratio=4,drop_connect_rate=0.2):\n","    super().__init__()\n","    self.use_residual = (ch_in==ch_out) & (stride==1)\n","    ch_med = int(ch_in*expand_ratio)\n","    ch_sq  = max(1, ch_in//reduction_ratio)\n","\n","    if expand_ratio != 1.0:\n","      layers = [ConvBN(ch_in, ch_med, 1), Swish()]\n","    else:\n","      layers = []\n","    \n","    layers.extend([ConvBN(ch_med, ch_med, kernel_size, stride=stride, padding=0, groups=ch_med),\n","                  Swish(),\n","                  SEblock(ch_med, ch_sq),\n","                  ConvBN(ch_med, ch_out, 1),\n","                  ])\n","    \n","    if self.use_residual:\n","      self.drop_connect = DropConnect(drop_connect_rate)\n","\n","    self.layers = nn.Sequential(*layers)\n","\n","  def forward(self, x):\n","    if self.use_residual:\n","      return x + self.drop_connect(self.layers(x))\n","    else:\n","      return self.layers(x)"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1663305781344,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"l7Uu9trmlWoH"},"outputs":[],"source":["#@title Flatten {display-mode: \"form\"}\n","class Flatten(nn.Module):\n","  def forward(self, x):\n","    return x.view(x.shape[0], -1)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663305781344,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"okmgJZIvlWoI"},"outputs":[],"source":["#@title MultiModalNet {display-mode: \"form\"}\n","class MultiModalNet(nn.Module):\n","  def __init__(self,\n","               width_mult=2.0,\n","               depth_mult=1.0,\n","               resolution=None,\n","               dropout_rate=0.2,\n","               num_1d_features=10,\n","               num_classes=4,\n","               input_ch=3):\n","    super().__init__()\n","    '''\n","    # expand_ratio, channel, repeats, stride, kernel_size                   \n","    settings = [\n","        [1,  16, 1, 1, 3],  # MBConv1_3x3, SE, 112 -> 112                   \n","        [6,  24, 2, 2, 3],  # MBConv6_3x3, SE, 112 ->  56                   \n","        [6,  40, 2, 2, 5],  # MBConv6_5x5, SE,  56 ->  28                   \n","        [6,  80, 3, 2, 3],  # MBConv6_3x3, SE,  28 ->  14                   \n","        [6, 112, 3, 1, 5],  # MBConv6_5x5, SE,  14 ->  14                   \n","        [6, 192, 4, 2, 5],  # MBConv6_5x5, SE,  14 ->   7                   \n","        [6, 320, 1, 1, 3]   # MBConv6_3x3, SE,   7 ->   7]                  \n","    ]\n","    ch_out = int(math.ceil(32*width_mult))\n","    features = [nn.AdaptiveAvgPool2d(resolution)] if resolution else []\n","    features.extend([ConvBNFirst(input_ch, ch_out), Swish()])     # -> [32, 3, 3, 3]\n","\n","    ch_in = ch_out\n","    for t, c, n, s, k in settings:\n","      ch_out = int(math.ceil(c*width_mult))\n","      repeats = int(math.ceil(n*depth_mult))\n","      for i in range(repeats):\n","        stride = s if i==0 else 1\n","        features.extend([BMConvBlock(ch_in, ch_out, t, stride, k)])\n","        ch_in = ch_out\n","\n","    '''\n","    features = [BMConvBlock(input_ch, 32, expand_ratio=6, stride=(1,257), kernel_size=(1, 257))]\n","    features.extend([BMConvBlock(32, 32, expand_ratio=6, stride=(2,1), kernel_size=(5,1))])\n","    features.extend([BMConvBlock(32, 32, expand_ratio=6, stride=(2,1), kernel_size=(5,1))])\n","    features.extend([BMConvBlock(32, 32, expand_ratio=6, stride=(2,1), kernel_size=(5,1))])\n","\n","    ch_last = int(math.ceil(1280*width_mult))\n","    features.extend([ConvBN(32, ch_last, 1), Swish()])\n","\n","    self.features2d = nn.Sequential(*features)\n","    self.reshape = nn.Sequential(\n","        nn.AdaptiveAvgPool2d(1),\n","        Flatten(),\n","        nn.Dropout(dropout_rate),\n","        nn.Linear(ch_last, 128)\n","    )\n","    self.classifier = nn.Sequential(\n","        nn.Linear(128*2, 128),\n","        nn.ReLU(),\n","        nn.Linear(128, 64),\n","        nn.ReLU(),\n","        nn.Linear(64, num_classes),\n","        nn.Softmax(dim=1)\n","    )\n","\n","    self.features1d = nn.Sequential(\n","        nn.Linear(num_1d_features, 256),\n","        nn.ReLU(),\n","        nn.Linear(256, 128),\n","        nn.ReLU(),\n","    )\n","\n","  def forward(self, x):\n","    x1=self.features2d(x[1])\n","    x1=self.reshape(x1)\n","    x0=self.features1d(x[0])\n","    x = torch.cat((x0,x1), dim=1)\n","    x=self.classifier(x)\n","\n","    return x"]},{"cell_type":"markdown","metadata":{"id":"oeU7XniFXyTe"},"source":["# Dataset"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663305781344,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"66a6YkLhHnbs"},"outputs":[],"source":["RESEARCH_WORK_PATH = \"/content/drive/MyDrive/Colab Notebooks/BachelorResearch/\""]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1391775,"status":"ok","timestamp":1663307173116,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"GBSyWXyPcUcq","outputId":"66fd8bb8-3454-4bbd-f376-eab6a70e5df5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Q1 9200\n","Q2 9200\n","Q3 9200\n","Q4 9200\n","Q1 9200\n","Q2 9200\n","Q3 9200\n","Q4 9200\n"]}],"source":["import shutil\n","import os\n","\n","\n","data_dir = \"/content/datas/\"\n","if os.path.exists(data_dir):\n","  shutil.rmtree(data_dir)\n","for dirs in os.listdir(RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\"):\n","  if \"Q\" in dirs:\n","    shutil.copytree(RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\" + dirs, data_dir + dirs)\n","\n","for q in \"Q1 Q2 Q3 Q4\".split(\" \"):\n","  d = RESEARCH_WORK_PATH + \"MER_audio_taffc_dataset_wav/5s_0.5shift/pickles1/\"  + q + \"/\"\n","  print(q, sum(os.path.isfile(os.path.join(d, name)) for name in os.listdir(d)))\n","\n","for q in \"Q1 Q2 Q3 Q4\".split(\" \"):\n","  d = data_dir + q + \"/\"\n","  print(q, sum(os.path.isfile(os.path.join(d, name)) for name in os.listdir(d)))"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663307173116,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"Qisijwexdj-c"},"outputs":[],"source":["import os\n","def make_filepath_list(root, train_rate=0.8):\n","  train_file_list = []\n","  valid_file_list = []\n","\n","  for dirs in os.listdir(root):\n","    if \"Q\" in dirs:\n","      file_dir = os.path.join(root, dirs)\n","      file_list = os.listdir(file_dir)\n","\n","\n","      for f in file_list:\n","        split_num = int(f.split(\".\")[1].split(\"_\")[-1])\n","        if split_num % 5 == 4:\n","          valid_file_list.append(os.path.join(root, dirs, f).replace('\\\\', '/'))\n","        else:\n","          train_file_list.append(os.path.join(root, dirs, f).replace('\\\\', '/'))\n","\n","  \n","  return train_file_list, valid_file_list\n"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":4829,"status":"ok","timestamp":1663307177943,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"YZBZDOaQYDkf","outputId":"23b44e4f-58a2-4c03-932d-d955ac6060fb"},"outputs":[{"output_type":"stream","name":"stdout","text":["学習データ数 :  29600\n","/content/datas/Q2/Q2.MT0005026798_7.wav.pickle\n","検証データ数 :  7200\n","/content/datas/Q2/Q2.MT0000732821_24.wav.pickle\n","Dataset1 shape: torch.Size([26])\n","Dataset2 shape: torch.Size([1, 431, 257])\n","Dataset label: 1\n"]}],"source":["from torch.utils import data\n","import numpy as np\n","import librosa\n","import pickle\n","import torch\n","import cv2\n","\n","class musicDataset(data.Dataset):\n","\n","  def __init__(self, file_list, classes, phase='train'):\n","    self.file_list = file_list\n","    self.classes = classes\n","    self.phase = phase\n","\n","  def __len__(self):\n","    return len(self.file_list)\n","\n","\n","  def __getitem__(self, index):\n","    pickle_path = self.file_list[index]\n","    x,y = pickle.load(open(pickle_path, mode=\"rb\"))\n","    return x, y\n","\n","\n","train_file_list, valid_file_list = make_filepath_list(data_dir)\n","\n","print('学習データ数 : ', len(train_file_list))\n","print(train_file_list[0])\n","\n","print('検証データ数 : ', len(valid_file_list))\n","print(valid_file_list[0])\n","\n","q_classes = \"Q1 Q2 Q3 Q4\".split(\" \")\n","\n","train_dataset = musicDataset(\n","    file_list=train_file_list, classes=q_classes, phase='train'\n",")\n","\n","valid_dataset = musicDataset(\n","    file_list=valid_file_list, classes=q_classes, phase='valid'\n",")\n","\n","\n","index = 0\n","print(\"Dataset1 shape:\", train_dataset.__getitem__(index)[0][0].size())\n","print(\"Dataset2 shape:\", train_dataset.__getitem__(index)[0][1].size())\n","print(\"Dataset label:\", train_dataset.__getitem__(index)[1])"]},{"cell_type":"markdown","metadata":{"id":"7trqW82_xGAa"},"source":["# DataLoader"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5591,"status":"ok","timestamp":1663307183532,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"B6vsgsJWxIsd","outputId":"866cb659-f2d2-49ac-9894-174ff4ecb7da"},"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([32, 26])\n","torch.Size([32, 1, 431, 257])\n","tensor([0, 3, 0, 3, 0, 3, 2, 1, 0, 0, 1, 3, 3, 0, 1, 0, 0, 2, 3, 0, 0, 2, 3, 0,\n","        0, 0, 2, 3, 1, 1, 0, 3])\n"]}],"source":["# バッチサイズの指定\n","batch_size = 32\n","\n","# DataLoaderを作成\n","train_dataloader = data.DataLoader(\n","    train_dataset, batch_size=batch_size, shuffle=True, num_workers=os.cpu_count(), pin_memory=True)\n","\n","valid_dataloader = data.DataLoader(\n","    valid_dataset, batch_size=batch_size, shuffle=False, num_workers=os.cpu_count(), pin_memory=True)\n","\n","# pin_mem and num_workers are acceleration technique -> https://qiita.com/sugulu_Ogawa_ISID/items/62f5f7adee083d96a587#11-num_workers\n","\n","# 辞書にまとめる\n","dataloaders_dict = {\n","    'train': train_dataloader, \n","    'valid': valid_dataloader\n","}\n","\n","# 動作確認\n","# イテレータに変換\n","batch_iterator = iter(dataloaders_dict['train'])\n","\n","# 1番目の要素を取り出す\n","inputs, labels = next(batch_iterator)\n","\n","print(inputs[0].size())\n","print(inputs[1].size())\n","print(labels)\n"]},{"cell_type":"markdown","metadata":{"id":"6sQ_HYBMX8zK"},"source":["# Optimizer, Criterion"]},{"cell_type":"code","execution_count":16,"metadata":{"executionInfo":{"elapsed":5,"status":"ok","timestamp":1663307183532,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"uZ4VYiy4RLQc"},"outputs":[],"source":["torch_clearlizer = False #@param {type: \"boolean\"}\n","\n","if torch_clearlizer:\n","  del train_dataset\n","  del valid_dataset\n","  del train_dataloader\n","  del valid_dataloader\n","  del labels\n","  del loss_hist\n","  del acc_hist\n","  del optimizer\n","  del criterion\n","  torch.cuda.empty_cache()"]},{"cell_type":"code","execution_count":17,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1663307183532,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"},"user_tz":-540},"id":"fvrLY1X_x7vx"},"outputs":[],"source":["from torch import optim\n","\n","model     = MultiModalNet(input_ch=1, num_classes=4, num_1d_features=train_dataset.__getitem__(index)[0][0].size(0)).to('cuda')\n","optimizer = optim.SGD(model.parameters(),lr=0.1) \n","criterion = nn.CrossEntropyLoss()"]},{"cell_type":"markdown","metadata":{"id":"4W8ghOHYn7It"},"source":["SGD -> じわっとloss減ってく\n"]},{"cell_type":"markdown","metadata":{"id":"RlJy_DzbyMMd"},"source":["# Training"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6W9AAwsyL3-","outputId":"c57c8782-90c3-4dba-9e88-337be9826a76","executionInfo":{"status":"ok","timestamp":1663311383801,"user_tz":-540,"elapsed":4200272,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 1: 100%|\u001b[32m██████████\u001b[0m| 925/925 [02:12<00:00,  6.99batch/s, loss=1.07]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 1 Result: Loss: 1.2026 Acc: 0.5099\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 1: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:32<00:00,  6.97batch/s, loss=1.2]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 1 Result: Loss: 1.1087 Acc: 0.6119\n","\n","Epoch 2/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 2: 100%|\u001b[32m██████████\u001b[0m| 925/925 [02:02<00:00,  7.52batch/s, loss=1.1]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 2 Result: Loss: 1.0926 Acc: 0.6407\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 2: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:31<00:00,  7.05batch/s, loss=1.05]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 2 Result: Loss: 1.0230 Acc: 0.7182\n","\n","Epoch 3/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 3: 100%|\u001b[32m██████████\u001b[0m| 925/925 [02:00<00:00,  7.66batch/s, loss=1.06]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 3 Result: Loss: 1.0365 Acc: 0.7002\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 3: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:31<00:00,  7.21batch/s, loss=0.963]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 3 Result: Loss: 1.0531 Acc: 0.6796\n","\n","Epoch 4/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 4: 100%|\u001b[32m██████████\u001b[0m| 925/925 [02:03<00:00,  7.52batch/s, loss=0.955]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 4 Result: Loss: 0.9959 Acc: 0.7438\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 4: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:32<00:00,  7.01batch/s, loss=1.05]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 4 Result: Loss: 0.9523 Acc: 0.7922\n","\n","Epoch 5/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 5: 100%|\u001b[32m██████████\u001b[0m| 925/925 [02:07<00:00,  7.24batch/s, loss=0.917]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 5 Result: Loss: 0.9656 Acc: 0.7761\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 5: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:45<00:00,  4.95batch/s, loss=1.05]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 5 Result: Loss: 0.9307 Acc: 0.8122\n","\n","Epoch 6/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 6: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:03<00:00,  5.03batch/s, loss=0.891]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 6 Result: Loss: 0.9389 Acc: 0.8023\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 6: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.13batch/s, loss=0.99]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 6 Result: Loss: 0.9218 Acc: 0.8210\n","\n","Epoch 7/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 7: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.07batch/s, loss=0.875]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 7 Result: Loss: 0.9162 Acc: 0.8268\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 7: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:44<00:00,  5.01batch/s, loss=0.997]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 7 Result: Loss: 0.8913 Acc: 0.8533\n","\n","Epoch 8/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 8: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:03<00:00,  5.05batch/s, loss=0.868]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 8 Result: Loss: 0.8977 Acc: 0.8440\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 8: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.16batch/s, loss=0.99]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 8 Result: Loss: 0.8738 Acc: 0.8701\n","\n","Epoch 9/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 9: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:03<00:00,  5.05batch/s, loss=0.871]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 9 Result: Loss: 0.8840 Acc: 0.8588\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 9: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.17batch/s, loss=1.06]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 9 Result: Loss: 0.8793 Acc: 0.8628\n","\n","Epoch 10/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 10: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:03<00:00,  5.03batch/s, loss=0.874]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 10 Result: Loss: 0.8690 Acc: 0.8742\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 10: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.15batch/s, loss=1.01]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 10 Result: Loss: 0.8427 Acc: 0.9003\n","\n","Epoch 11/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 11: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.06batch/s, loss=0.776]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 11 Result: Loss: 0.8601 Acc: 0.8831\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 11: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.16batch/s, loss=0.926]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 11 Result: Loss: 0.8563 Acc: 0.8860\n","\n","Epoch 12/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 12: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.06batch/s, loss=0.799]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 12 Result: Loss: 0.8502 Acc: 0.8929\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 12: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:44<00:00,  5.00batch/s, loss=0.936]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 12 Result: Loss: 0.8398 Acc: 0.9033\n","\n","Epoch 13/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 13: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.07batch/s, loss=0.789]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 13 Result: Loss: 0.8459 Acc: 0.8968\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 13: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.18batch/s, loss=0.993]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 13 Result: Loss: 0.8446 Acc: 0.8975\n","\n","Epoch 14/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 14: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.08batch/s, loss=0.864]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 14 Result: Loss: 0.8374 Acc: 0.9051\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 14: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.17batch/s, loss=0.862]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 14 Result: Loss: 0.8396 Acc: 0.9029\n","\n","Epoch 15/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 15: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.08batch/s, loss=0.788]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 15 Result: Loss: 0.8278 Acc: 0.9155\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 15: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:44<00:00,  5.03batch/s, loss=0.918]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 15 Result: Loss: 0.8238 Acc: 0.9187\n","\n","Epoch 16/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 16: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.07batch/s, loss=0.836]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 16 Result: Loss: 0.8207 Acc: 0.9230\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 16: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.18batch/s, loss=0.949]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 16 Result: Loss: 0.8261 Acc: 0.9174\n","\n","Epoch 17/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 17: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:01<00:00,  5.08batch/s, loss=0.812]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 17 Result: Loss: 0.8223 Acc: 0.9206\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 17: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:44<00:00,  5.11batch/s, loss=0.89]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 17 Result: Loss: 0.8151 Acc: 0.9282\n","\n","Epoch 18/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 18: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:03<00:00,  5.04batch/s, loss=0.752]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 18 Result: Loss: 0.8162 Acc: 0.9269\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 18: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.18batch/s, loss=0.929]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 18 Result: Loss: 0.8126 Acc: 0.9306\n","\n","Epoch 19/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 19: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:02<00:00,  5.07batch/s, loss=0.745]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 19 Result: Loss: 0.8115 Acc: 0.9318\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 19: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:43<00:00,  5.18batch/s, loss=0.895]\n"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 19 Result: Loss: 0.8081 Acc: 0.9346\n","\n","Epoch 20/20\n","-------------\n"]},{"output_type":"stream","name":"stderr","text":["[train] Epoch 20: 100%|\u001b[32m██████████\u001b[0m| 925/925 [03:01<00:00,  5.08batch/s, loss=0.808]\n"]},{"output_type":"stream","name":"stdout","text":["[train] Epoch 20 Result: Loss: 0.8047 Acc: 0.9389\n","\n"]},{"output_type":"stream","name":"stderr","text":["[valid] Epoch 20: 100%|\u001b[31m██████████\u001b[0m| 225/225 [00:44<00:00,  5.03batch/s, loss=0.857]"]},{"output_type":"stream","name":"stdout","text":["[valid] Epoch 20 Result: Loss: 0.7983 Acc: 0.9453\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}],"source":["from tqdm import tqdm\n","# エポック数\n","num_epochs = 20\n","\n","\n","loss_hist = [[],[]]\n","acc_hist = [[],[]]\n","\n","for epoch in range(num_epochs):\n","  print('Epoch {}/{}'.format(epoch+1, num_epochs))\n","  print('-------------')\n","  \n","  for phase in ['train', 'valid']:\n","      \n","    if phase == 'train':\n","      # モデルを訓練モードに設定\n","      model.train()\n","    else:\n","      # モデルを推論モードに設定\n","      model.eval()\n","    \n","    # 損失和\n","    epoch_loss = 0.0\n","    # 正解数\n","    epoch_corrects = 0\n","    \n","    # DataLoaderからデータをバッチごとに取り出す\n","    with tqdm(dataloaders_dict[phase],unit='batch',colour='green' if phase == 'train' else 'red') as pbar:\n","      pbar.set_description('['+phase+'] Epoch %d'% (epoch+1))\n","      for inputs, labels in pbar:\n","        inputs = [inputs[0].to('cuda') , inputs[1].to('cuda')]\n","        labels = labels.to('cuda')\n","        # optimizerの初期化\n","        optimizer.zero_grad()\n","        \n","        # 学習時のみ勾配を計算させる設定にする\n","        with torch.set_grad_enabled(phase == 'train'):\n","          outputs = model(inputs)\n","          \n","          # 損失を計算\n","          loss = criterion(outputs, labels)\n","          \n","          # ラベルを予測\n","          _, preds = torch.max(outputs, 1)\n","          \n","          # 訓練時はバックプロパゲーション\n","          if phase == 'train':\n","            # 逆伝搬の計算\n","            loss.backward()\n","            # パラメータの更新\n","            optimizer.step()\n","          \n","          # イテレーション結果の計算\n","          # lossの合計を更新\n","          # PyTorchの仕様上各バッチ内での平均のlossが計算される。\n","          # データ数を掛けることで平均から合計に変換をしている。\n","          # 損失和は「全データの損失/データ数」で計算されるため、\n","          # 平均のままだと損失和を求めることができないため。\n","          l = loss.item()\n","          epoch_loss += l * inputs[0].size(0)\n","          pbar.set_postfix(dict(loss=l))\n","\n","          # 正解数の合計を更新\n","          epoch_corrects += torch.sum(preds == labels.data)\n","\n","    # epochごとのlossと正解率を表示\n","    epoch_loss = epoch_loss / len(dataloaders_dict[phase].dataset)\n","    epoch_acc = epoch_corrects.double() / len(dataloaders_dict[phase].dataset)\n","    loss_hist[0].append(epoch_loss) if phase == 'train' else loss_hist[1].append(epoch_loss)\n","    acc_hist[0].append(epoch_acc)      if phase == 'train' else acc_hist[1].append(epoch_acc)\n","\n","    print('[{}] Epoch {} Result: Loss: {:.4f} Acc: {:.4f}\\n'.format(phase, epoch+1, epoch_loss, epoch_acc))"]},{"cell_type":"markdown","metadata":{"id":"ePnwi3FxzO_C"},"source":["# Visualization"]},{"cell_type":"code","execution_count":19,"metadata":{"id":"_9TOc3heEQFN","colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"status":"ok","timestamp":1663311384806,"user_tz":-540,"elapsed":1007,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}},"outputId":"85bbe74d-9fc6-4f1f-da4a-e0b9e8e7ce06"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["from matplotlib import pyplot as plt\n","# 学習状況のプロット関数の定義\n","# 分類精度の履歴をプロット\n","plt.plot([a.cpu() for a in acc_hist[0]])\n","plt.plot([a.cpu() for a in acc_hist[1]])\n","plt.title('model accuracy')\n","plt.xlabel('epoch')\n","plt.ylabel('accuracy')\n","plt.legend(['training', 'validation'], loc='lower right')\n","plt.show()\n","\n","# 損失関数の履歴をプロット\n","plt.plot(loss_hist[0])\n","plt.plot(loss_hist[1])\n","plt.title('model loss')\n","plt.xlabel('epoch')\n","plt.ylabel('loss')\n","plt.legend(['training', 'validation'], loc='upper right')\n","plt.show()\n"]},{"cell_type":"markdown","source":["# Store Infos"],"metadata":{"id":"CMPXWzHA7SdS"}},{"cell_type":"code","source":["model_info = model.__str__()\n","datas = {\n","    'structure' : model_info,\n","    'acc' : acc_hist,\n","    'loss' : loss_hist,\n","}\n","\n","import pickle\n","with open('/content/drive/MyDrive/BachelorResearch/src/train_my_model_stft_1d_features_3/datas/7.pickle', 'wb') as p:\n","    pickle.dump(datas, p)"],"metadata":{"id":"0Te6dnm37Wsg","executionInfo":{"status":"ok","timestamp":1663311385449,"user_tz":-540,"elapsed":646,"user":{"displayName":"松波(Matsunami)旭(Akira)","userId":"04248064094562346782"}}},"execution_count":20,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"provenance":[{"file_id":"1YsOwEX6vlcFlz16LaI9G8c3ByPeWgM2C","timestamp":1663080016017},{"file_id":"1UO0fssEK5-677ly1S6gH1b_HZqExVQFQ","timestamp":1656395497641}],"mount_file_id":"1hRojZzLIgw68gZ-wb_LdOi6J2tQ_k2TB","authorship_tag":"ABX9TyOjuQ4GPNQyTmlZlczWMJ/o"},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}